# This files contains your custom actions which can be used to run
# custom Python code.
#
# See this guide on how to implement these action:
# https://rasa.com/docs/rasa/custom-actions


# This is a simple example for a custom action which utters "Hello World!"

from typing import Any, Text, Dict, List
import random

from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, UserUtteranceReverted
from rasa_sdk.forms import FormAction

from langdetect import detect

class ActionShowTypeOfLoan(Action):
    def name(self):
        return 'action_show_type_of_loan'
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            reply = "VYCCU Savings and Credit Cooperative Limited provides following type of loans to it's customers."
            buttons = [{'title': 'Agriculture Loan',
                        'payload': '{}'.format('agriculture loan')},
                        {'title': 'Career Loan',
                        'payload': '{}'.format('career loan')},
                        {'title': 'Education Loan',
                        'payload': '{}'.format('education loan')},
                        {'title': 'Hire Purchase Loan',
                        'payload': '{}'.format('hire purchase loan')},
                        {'title': 'Home Loan',
                        'payload': '{}'.format('home loan')},
                        {'title': 'Business Loan',
                        'payload': '{}'.format('business loan')},
                        {'title': 'Industry Loan',
                        'payload': '{}'.format('industry loan')}   
                        ]
        else:
            reply = "рд╡рд┐рдХреБ рдмрдЪрдд рддрдерд╛ реардг рд╕рд╣рдХрд╛рд░реА рд▓рд┐рдорд┐рдЯреЗрдбрд▓реЗ рдЖрдлреНрдирд╛ рдЧреНрд░рд╛рд╣рдХрд╣рд░реБ рд▓рд╛рдИ рдирд┐рдореНрди рдкреНрд░рдХрд╛рд░рдХреЛ рдЛрдг (loan) рдкреНрд░рджрд╛рди рдЧрд░реНрджрдЫред"
            buttons = [{'title': 'рдХреГрд╖рд┐ рдЛрдг',
                        'payload': 'рдорд▓рд╛рдИ рдХреГрд╖рд┐ рдЛрдг рдмрд╛рд░реЗ рднрди'},
                        {'title': 'рдХреНрдпрд╛рд░рд┐рдпрд░ рдЛрдг',
                        'payload': 'рдорд▓рд╛рдИ рдХреНрдпрд╛рд░рд┐рдпрд░ рдЛрдг рдмрд╛рд░реЗ рднрди'},
                        {'title': 'рд╢реМрдХреНрд╖рд┐рдХ рдЛрдг',
                        'payload': 'рдорд▓рд╛рдИ рд╢реМрдХреНрд╖рд┐рдХ рдЛрдг рдмрд╛рд░реЗ рднрди'},
                        {'title': 'рднрд╛рдбрд╛ рдЦрд░реАрдж рдЛрдг',
                        'payload': 'рдорд▓рд╛рдИ рднрд╛рдбрд╛ рдЦрд░реАрдж рдЛрдг рдмрд╛рд░реЗ рднрди'},
                        {'title': 'рдШрд░ рд╕рдореНрдкрддреА рдЛрдг',
                        'payload': 'рдорд▓рд╛рдИ рдШрд░ рд╕рдореНрдкрддреА рдЛрдг рдмрд╛рд░реЗ рднрди'},
                        {'title': 'рд╡реНрдпрд╡рд╕рд╛рдпрд┐рдХ рдЛрдг',
                        'payload': 'рдорд▓рд╛рдИ рд╡реНрдпрд╡рд╕рд╛рдпрд┐рдХ рдЛрдг рдмрд╛рд░реЗ рднрди'},
                        {'title': 'рдЙрджреНрдпреЛрдЧ рдЛрдг',
                        'payload': 'рдорд▓рд╛рдИ рдЙрджреНрдпреЛрдЧ рдЛрдг рдмрд╛рд░реЗ рднрди'}   
                        ]
        attachment = {
            "query_response": reply,
            "data":[{"buttons":buttons}],
            "type":"message_with_buttons",
            "data_fetch_status": "success"
        }
        # dispatcher.utter_message(attachment=attachment, buttons=buttons)
        dispatcher.utter_message(attachment=attachment)
        return []


class FetchTypeOfLoan(Action):
    def name(self):
        return 'action_fetch_type_of_loan'

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        try:
            loan_type = tracker.get_slot('type_of_loan')
        except:
            messages = [" ЁЯШХ Sorry, I cannot understand you. Could you repeat it again? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред", " ЁЯШХ I am having confusion in understanding it. Would you repeat it please? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред",
                "ЁЯШХ I find it quite ambiguous. Can you tell me again a bit clearly? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред"]
            reply = random.choice(messages)
            attachment = {
                "query_response": reply,
                "data":[],
                "type":"normal_message",
                "data_fetch_status": "success"
            }
            dispatcher.utter_message(attachment=attachment)
            return [UserUtteranceReverted()]
        language_list = ["hi","ne","mr"]
        question = tracker.latest_message['text']
        if detect(question) not in language_list:
            loan_link = "<a href = 'http://vyccu.org.np/services/loans'>loan</a>"
            reply = f"VYCCU Savings and Credit Cooperative Ltd provides attractive {loan_type} . You can get more info on {loan_type} from {loan_link}"
        else:
            loan_link = "<a href = 'http://vyccu.org.np/services/loans'>рдЛрдг (Loan)</a>"
            reply = f"рд╡рд┐рдХреБ рдмрдЪрдд рддрдерд╛ реардг рд╕рд╣рдХрд╛рд░реА рд▓рд┐рдорд┐рдЯреЗрдбрд▓реЗ рдЖрдХрд░реНрд╖рдХ {loan_type} рдкреНрд░рджрд╛рди рдЧрд░реНрджрдЫред рддрдкрд╛рдЗрдБ рдердк рдЬрд╛рдирдХрд╛рд░реАрдХрд╛ рд▓рд╛рдЧрд┐ рдпреЛ рд▓рд┐рдиреНрдХ рдо рдЬрд╛рди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ: {loan_link}"
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return [SlotSet('type_of_loan', None)]

class ActionShowTypeOfServices(Action):
    def name(self):
        return 'action_show_type_of_services'
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            reply = "We facilitate following type of services."
            buttons = [{'title': 'ATM',
                    'payload': '{}'.format('atm')},
                    {'title': 'SMS Banking',
                    'payload': '{}'.format('sms banking')},
                    {'title': 'Mobile Banking',
                    'payload': '{}'.format('mobile banking')},
                    {'title': 'Remittance',
                    'payload': '{}'.format('remittance')},
                    {'title': 'Health Insurance',
                    'payload': '{}'.format('health insurance')},
                    {'title': 'Loan',
                    'payload': '{}'.format('loan')},
                    {'title': 'Deposit',
                    'payload': '{}'.format('deposit')},
                    {'title': 'Other Services',
                    'payload': '{}'.format('other services')}   
                    ]
        else:
            reply = "рд╣рд╛рдореА рдирд┐рдореНрди рдкреНрд░рдХрд╛рд░рдХрд╛ рд╕реЗрд╡рд╛рд╣рд░реВрдХреЛ рд╕реБрд╡рд┐рдзрд╛ рджрд┐рдиреНрдЫреМрдВред"
            buttons = [{'title': 'рдПрдЯреАрдПрдо рд╕реЗрд╡рд╛',
                    'payload': 'рдорд▓рд╛рдИ рдПрдЯреАрдПрдо рд╕реЗрд╡рд╛ рдмрд╛рд░реЗ рднрди'},
                    {'title': 'рдПрд╕рдПрдордПрд╕ рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛',
                    'payload': 'рдорд▓рд╛рдИ рдПрд╕рдПрдордПрд╕ рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛ рдмрд╛рд░реЗ рднрди'},
                    {'title': 'рдореЛрдмрд╛рдЗрд▓ рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛',
                    'payload': 'рдорд▓рд╛рдИ рдореЛрдмрд╛рдЗрд▓ рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛ рдмрд╛рд░реЗ рднрди'},
                    {'title': 'рд░реЗрдорд┐рдЯреНрдпрд╛рдиреНрд╕ рд╕реЗрд╡рд╛',
                    'payload': 'рдорд▓рд╛рдИ рд░реЗрдорд┐рдЯреНрдпрд╛рдиреНрд╕ рд╕реЗрд╡рд╛ рдмрд╛рд░реЗ рднрди'},
                    {'title': 'рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмреАрдорд╛ рд╕реЗрд╡рд╛',
                    'payload': 'рдорд▓рд╛рдИ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмреАрдорд╛ рд╕реЗрд╡рд╛ рдмрд╛рд░реЗ рднрди'},
                    {'title': 'рдЛрдг рд╕реЗрд╡рд╛',
                    'payload': 'рдорд▓рд╛рдИ рдЛрдг рд╕реЗрд╡рд╛ рдмрд╛рд░реЗ рднрди'},
                    {'title': 'рдбрд┐рдкреЛрдЬрд┐рдЯ рд╕реЗрд╡рд╛',
                    'payload': 'рдорд▓рд╛рдИ рдбрд┐рдкреЛрдЬрд┐рдЯ рд╕реЗрд╡рд╛ рдмрд╛рд░реЗ рднрди'},
                    {'title': 'рдЕрдиреНрдп рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛',
                    'payload': 'рдорд▓рд╛рдИ рдЕрдиреНрдп рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛ рдмрд╛рд░реЗ рднрди'}   
                    ]
        attachment = {
            "query_response": reply,
            "data":[{"buttons":buttons}],
            "type":"message_with_buttons",
            "data_fetch_status": "success"
        }
        # dispatcher.utter_message(attachment=attachment, buttons=buttons)
        dispatcher.utter_message(attachment=attachment)
        return []

class FetchTypeOfServices(Action):
    def name(self):
        return 'action_fetch_type_of_services'

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        service_type = tracker.get_slot('type_of_services')
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            type_list = {
                "deposit": "<a href = 'http://vyccu.org.np/services/deposit'>Deposit Service</a>",
                "loan": "<a href = 'http://vyccu.org.np/services/loans'>Loan Service</a>",
                "remittance": "<a href = 'http://vyccu.org.np/services/remittance'>Remittance Service</a>",
                "health insurance": "<a href = 'http://vyccu.org.np/services/health-insurance'>Health Insurance Service </a>",
                "atm": "<a href= 'http://vyccu.org.np/services/atm-service'>ATM Service</a>",
                "sms banking": "<a href = 'http://vyccu.org.np/services/other-services'>SMS Banking Service</a>",
                "mobile banking": "<a href = 'http://vyccu.org.np/services/other-services'>Mobile Banking Service</a>",
                "other services": "<a href = 'http://vyccu.org.np/services/other-services'>Other Banking Service</a>"
            }
        else:
            type_list = {
                "deposit": "<a href = 'http://vyccu.org.np/services/deposit'>рдбрд┐рдкреЛрдЬрд┐рдЯ рд╕реЗрд╡рд╛ (Deposit Service)</a>",
                "loan": "<a href = 'http://vyccu.org.np/services/loans'>рдЛрдг рд╕реЗрд╡рд╛ (Loan Service)</a>",
                "remittance": "<a href = 'http://vyccu.org.np/services/remittance'>рд░реЗрдорд┐рдЯреНрдпрд╛рдиреНрд╕ рд╕реЗрд╡рд╛ (Remittance Service)</a>",
                "health insurance": "<a href = 'http://vyccu.org.np/services/health-insurance'>рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмреАрдорд╛ рд╕реЗрд╡рд╛ (Health Insurance Service)</a>",
                "atm": "<a href= 'http://vyccu.org.np/services/atm-service'>рдПрдЯреАрдПрдо рд╕реЗрд╡рд╛ (ATM Service)</a>",
                "sms banking": "<a href = 'http://vyccu.org.np/services/other-services'>рдПрд╕рдПрдордПрд╕ рд╕реЗрд╡рд╛ (SMS Banking Service)</a>",
                "mobile banking": "<a href = 'http://vyccu.org.np/services/other-services'>рдореЛрдмрд╛рдЗрд▓ рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛ (Mobile Banking Service)</a>",
                "other services": "<a href = 'http://vyccu.org.np/services/other-services'>рдЕрдиреНрдп рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛ (Other Banking Service)</a>"
            }
        try:
            service_link = type_list[service_type]
        except:
            messages = ["ЁЯШХ Sorry, I cannot understand you. Could you repeat it again? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред", "ЁЯШХ I am having confusion in understanding it. Would you repeat it please? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред",
                "ЁЯШХ I find it quite ambiguous. Can you tell me again a bit clearly? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред"]
            reply = random.choice(messages)
            attachment = {
                "query_response": reply,
                "data":[],
                "type":"normal_message",
                "data_fetch_status": "success"
            }
            dispatcher.utter_message(attachment=attachment)
            return [UserUtteranceReverted()]
        if detect(question) not in language_list:
            reply = f"Oh you want to get {service_type}. We are happy to serve you. Learn more about {service_type} from {service_link}"
        else:
            reply = f"рдУрд╣ рддрдкрд╛рдИрдВ {service_type} рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрди рдЪрд╛рд╣рд╛рдиреБрд╣реБрдиреНрдЫред рд╣рд╛рдореА рддрдкрд╛рдИрдВрдХреЛ рд╕реЗрд╡рд╛ рдЧрд░реНрди рдкрд╛рдЙрдБрджрд╛ рдЦреБрд╕реА рдЫреМрдВред {service_type} рдХреЛ рдмрд╛рд░реЗрдорд╛ рдмрдврд┐ рдЬрдиреНрди рдпреЛ рд▓рд┐рдиреНрдХ рдо рдерд┐рдЪреНрдиреБрд╣реЛрд╕: {service_link}"
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return [SlotSet('type_of_services', None)]


class ActionShowTypeOfInterest(Action):
    def name(self):
        return 'action_show_type_of_interest'
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            reply = "Interest rate varies for following services:"
            buttons = [{'title': 'Loan',
                    'payload': '{}'.format('rate loan')},
                    {'title': 'Deposit',
                    'payload': '{}'.format('rate deposit')}   
                    ]
        else:
            reply = "рдмреНрдпрд╛рдЬ рджрд░ рдирд┐рдореНрди рд╕реЗрд╡рд╛рд╣рд░реВрдХреЛ рд▓рд╛рдЧрд┐ рднрд┐рдиреНрди рд╣реБрдиреНрдЫ:"
            buttons = [{'title': 'рдЛрдг',
                    'payload': 'рдЛрдг рдмреНрдпрд╛рдЬ рджрд░'},
                    {'title': 'рдбрд┐рдкреЛрдЬрд┐рдЯ',
                    'payload': 'рдбрд┐рдкреЛрдЬрд┐рдЯ рдмреНрдпрд╛рдЬ рджрд░'}   
                    ]
        attachment = {
            "query_response": reply,
            "data":[{"buttons":buttons}],
            "type":"message_with_buttons",
            "data_fetch_status": "success"
        }
        # dispatcher.utter_message(attachment=attachment, buttons=buttons)
        dispatcher.utter_message(attachment=attachment)
        return []

class FetchTypeOfInterest(Action):
    def name(self):
        return 'action_fetch_type_of_interest'

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        try:
            interest_type = tracker.get_slot('type_of_services')
            if interest_type == "rate loan":
                interest_type = "loan"
            elif interest_type == "rate deposit":
                interest_type = "deposit"
        except:
            messages = ["ЁЯШХ Sorry, I cannot understand you. Could you repeat it again? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред", "ЁЯШХ I am having confusion in understanding it. Would you repeat it please? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред",
                "ЁЯШХ I find it quite ambiguous. Can you tell me again a bit clearly? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред"]
            reply = random.choice(messages)
            attachment = {
                "query_response": reply,
                "data":[],
                "type":"normal_message",
                "data_fetch_status": "success"
            }
            dispatcher.utter_message(attachment=attachment)
            return [UserUtteranceReverted()]
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            reply = f"Oh, you want to check interest rate for {interest_type}. Get detailed information about our interest rates at <a href='http://vyccu.org.np/interest-rates/'>Interest Rate</a>"
        else:
            reply = f"рдУрд╣, рддрдкрд╛рдЗрдБ {interest_type}рдХрд╛ рд▓рд╛рдЧрд┐ рдмреНрдпрд╛рдЬ рджрд░ рдЬрдиреНрди рдЪрд╛рд╣рд╛рдиреБрд╣реБрдиреНрдЫред рд╣рд╛рдореНрд░реЛ рдмреНрдпрд╛рдЬ рджрд░ рдХреЛ рдмрд╛рд░реЗрдорд╛ рд╡рд┐рд╕реНрддреГрдд рдЬрд╛рдирдХрд╛рд░реА рдпреЛ рд▓рд┐рдиреНрдХрдорд╛ рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ:  <a href='http://vyccu.org.np/interest-rates/'>Interest Rate</a>"
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return [SlotSet('type_of_services', None)]

class About(Action):
    def name(self):
        return "action_about"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ['ЁЯСЛЁЯШГ I am your virtual assistant for VYCCU. VYCCU Savings and Credit Cooperative Limited is a primary-level single-purpose cooperative organization . You can get more info on <a href = "http://vyccu.org.np/category/our-profile-2">vyccu.org.np/our-profile</a>']
        else:
            messages = ['ЁЯСЛЁЯШГ рдо рддрдкрд╛рдЗрдБрдХреЛ рд╡рд┐рдХреБрдмрд╛рд░реЗ рдкреНрд░рд╢реНрдирд╣рд░реБрдХреЛ рдорджреНрджрдд рдЧрд░реНрдиреЗ рддрдкрд╛рдЗрдБрдХреЛ рд╕рд╣рд╛рдпрдХ рд╣реБрдБред рд╡рд┐рдХреБ рдмрдЪрдд рддрдерд╛ реардг рд╕рд╣рдХрд╛рд░реА рд▓рд┐рдорд┐рдЯреЗрдб рдПрдХ рдкреНрд░рд╛рдердорд┐рдХ-рд╕реНрддрд░ рдПрдХрд▓-рдЙрджреНрджреЗрд╢реНрдп рд╕рд╣рдХрд╛рд░реА рд╕рдВрд╕реНрдерд╛ рд╣реЛред рддрдкрд╛рдИрдВ рдорд╛ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ  <a href = "http://vyccu.org.np/category/our-profile-2">vyccu.org.np/our-profile</a>',
                        'ЁЯШБ рдо рдпрд╣рд╛рдБ рддрдкрд╛рдЗрдБрдХреЛ рд╡рд┐рдХреБрдмрд╛рд░реЗ рд░рд╣реЗрдХрд╛ рдЬрд┐рдЬреНрдЮрд╛рд╕рд╛рд╣рд░реБ рдмрд╛рд░реЗ рдорджреНрджрдд рдЧрд░реНрдиреЗ рд╕рд╛рдереА рд╣реБрдБред рд╡рд┐рдХреБ рдмрдЪрдд рддрдерд╛ реардг рд╕рд╣рдХрд╛рд░реА рд▓рд┐рдорд┐рдЯреЗрдб рдПрдХ рдкреНрд░рд╛рдердорд┐рдХ-рд╕реНрддрд░ рдПрдХрд▓-рдЙрджреНрджреЗрд╢реНрдп рд╕рд╣рдХрд╛рд░реА рд╕рдВрд╕реНрдерд╛ рд╣реЛред рддрдкрд╛рдИрдВ рдорд╛ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ  <a href = "http://vyccu.org.np/category/our-profile-2">vyccu.org.np/our-profile</a>']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class OutOfScope(Action):
    def name(self):
        return "action_out_of_scope"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        messages = ['ЁЯШХ Sorry I didnтАЩt catch that word? Could you tell me more clearly? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред',
                    'ЁЯШХ I am sorry I did not understand? Can you tell again? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return [UserUtteranceReverted()]

class AfterOutOfScope(Action):
    def name(self):
        return "action_after_out_of_scope"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        messages = ['ЁЯШХ We are sorry for not being able to understand you. Could you provide us your contact details so that we could help you properly? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХреЗ рддрдкрд╛рдИ рд╣рд╛рдореАрд▓рд╛рдИ рдЖрдлреНрдиреЛ рд╕рдореНрдкрд░реНрдХ рд╡рд┐рд╡рд░рдг рджрд┐рди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ рддрд╛рдХрд┐ рд╣рд╛рдореА рддрдкрд╛рдИрд▓рд╛рдИ рдЕрдЧрд╛рдбрд┐ рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрди рд╕рдХреМ?',
                    "ЁЯШХ Sorry, I don't think I can help you. Can you give us your contant detail so that we could help you properly? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХреЗ рддрдкрд╛рдИ рд╣рд╛рдореАрд▓рд╛рдИ рдЖрдлреНрдиреЛ рд╕рдореНрдкрд░реНрдХ рд╡рд┐рд╡рд░рдг рджрд┐рди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ рддрд╛рдХрд┐ рд╣рд╛рдореА рддрдкрд╛рдИрд▓рд╛рдИ рдЕрдЧрд╛рдбрд┐ рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрди рд╕рдХреМ?"]
        # buttons = [
        # 	{"title":"Email Address", "payload":"/form_email"},
        # 	{"title":"Contact Number", "payload":"/form_contact"}
        # ]
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"message_with_form",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class AskFirstName(Action):
    def name(self):
        return "action_ask_first_name"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        messages = ['Please give your First name <br>рддрдкрд╛рдИрдВрдХреЛ рдкрд╣рд┐рд▓реЛ рдирд╛рдо рднрд░реНрдиреБрд╣реЛрд╕реН',
                    'Provide us your First name <br>рддрдкрд╛рдИрдВрдХреЛ рдкрд╣рд┐рд▓реЛ рдирд╛рдо рднрд░реНрдиреБрд╣реЛрд╕реН']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class AskLastName(Action):
    def name(self):
        return "action_ask_last_name"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        messages = ['Please give your Last name <br>рддрдкрд╛рдИрдВрдХреЛ рдЕрдиреНрддрд┐рдо рдирд╛рдо рднрд░реНрдиреБрд╣реЛрд╕реН',
                    'Provide us your Last name <br>рддрдкрд╛рдИрдВрдХреЛ рдЕрдиреНрддрд┐рдо рдирд╛рдо рднрд░реНрдиреБрд╣реЛрд╕реН']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class AskContactNumner(Action):
    def name(self):
        return "action_ask_contact_number"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        messages = ['Please give your contact number <br>рддрдкрд╛рдИрдВрдХреЛ рд╕рдореНрдкрд░реНрдХ рдирдореНрдмрд░ рднрд░реНрдиреБрд╣реЛрд╕реН',
                    'Provide us your contact number <br>рддрдкрд╛рдИрдВрдХреЛ рд╕рдореНрдкрд░реНрдХ рдирдореНрдмрд░ рднрд░реНрдиреБрд╣реЛрд╕реН']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class AskEmailAddress(Action):
    def name(self):
        return "action_ask_email"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        messages = ['Please give your email address <br>рддрдкрд╛рдИрдВрдХреЛ рдИрдореЗрд▓ рднрд░реНрдиреБрд╣реЛрд╕реН',
                    'Provide us your email address <br>рддрдкрд╛рдИрдВрдХреЛ рдИрдореЗрд▓ рднрд░реНрдиреБрд╣реЛрд╕реН']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class FormSubmitted(Action):
    def name(self):
        return "action_form_submitted"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        f_name = tracker.get_slot('first_name')
        l_name = tracker.get_slot('last_name')
        if f_name != None or l_name != None:
            messages = [f'Thank you {f_name} {l_name}. ЁЯШГ Your form has been submitted successfully. We will contact you very soon. <br>рдзрдиреНрдпрд╡рд╛рдж {f_name} {l_name}! ЁЯЩП рд╣рд╛рдореА рддрдкрд╛рдИрдВрд▓рд╛рдИ рдЪрд╛рдБрдбреИ рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрдиреЗрдЫреМрдВред',
                        f'Thank you {f_name} {l_name} for your information. ЁЯШГ We will contact you as soon as possible. <br>рдзрдиреНрдпрд╡рд╛рдж {f_name} {l_name}! ЁЯЩП рд╣рд╛рдореА рддрдкрд╛рдИрдВрд▓рд╛рдИ рдЪрд╛рдБрдбреИ рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрдиреЗрдЫреМрдВред']
        else:
            messages = ['Thank you. ЁЯШГ Your form has been submitted successfully. We will contact you very soon. <br>рдзрдиреНрдпрд╡рд╛рдж! ЁЯЩП рд╣рд╛рдореА рддрдкрд╛рдИрдВрд▓рд╛рдИ рдЪрд╛рдБрдбреИ рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрдиреЗрдЫреМрдВред',
                        'Thank you for your information. ЁЯШГ We will contact you as soon as possible. <br>рдзрдиреНрдпрд╡рд╛рдж! ЁЯЩП рд╣рд╛рдореА рддрдкрд╛рдИрдВрд▓рд╛рдИ рдЪрд╛рдБрдбреИ рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрдиреЗрдЫреМрдВред']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class Greeting(Action):
    def name(self):
        return "action_greeting"
    
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ["Hi there. ЁЯСЛЁЯШГ It's such a pleasure to have you here. Welcome to VYCCU saving and credit co-operative Ltd. How can we help you.",
                        "Hello, ЁЯдЧ welcome to VYCCU saving and credit co-operative Ltd. How can we assist you."]
        else:
            messages = ["рдирдорд╕реНрдХрд╛рд░! ЁЯЩП рддрдкрд╛рдИрд▓рд╛рдИ рдпрд╣рд╛рдБ рдкрд╛рдЙрдБрджрд╛ рдЦреБрд╕реА рд▓рд╛рдЧреНрдпреЛред рд╡рд┐рдХреБ рдмрдЪрдд рддрдерд╛ реардг рд╕рд╣рдХрд╛рд░реА рд▓рд┐рдорд┐рдЯреЗрдбрдорд╛ рд╕реНрд╡рд╛рдЧрдд рдЫ рд╣рд╛рдореА рдХрд╕рд░реА рддрдкрд╛рдИрдВрд▓рд╛рдИ рдорджреНрджрдд рдЧрд░реНрди рд╕рдХреНрджрдЫреМрдВ?",
                        "рдирдорд╕реНрдХрд╛рд░, ЁЯЩП рд╡рд┐рдХреБ рдмрдЪрдд рддрдерд╛ реардг рд╕рд╣рдХрд╛рд░реА рд▓рд┐рдорд┐рдЯреЗрдбрдорд╛ рд╕реНрд╡рд╛рдЧрдд рдЫред рд╣рд╛рдореА рдХрд╕рд░реА рддрдкрд╛рдИрдВрд▓рд╛рдИ рд╕рд╣рдпреЛрдЧ рдЧрд░реНрди рд╕рдХреНрджрдЫреМрдВ?"]
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class AfterGreeting(Action):
    def name(self):
        return "action_after_greet"
    
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ["I am fine. How can we help you.",
                        "I am doing very well. How can we assist you."]
        else:
            messages = ["рдо рдард┐рдХ рдЫреБред ЁЯШГ рддрдкрд╛рдИрд▓рд╛рдИ рдХрд╕рд░реА рд╕рд╣рдпреЛрдЧ рдЧрд░реНрди рд╕рдХреНрдЫреМ?",
                        "рдо рдзреЗрд░реИ рд░рд╛рдореНрд░реЛ рдЧрд░реНрджреИ рдЫреБред ЁЯШГ рд╣рд╛рдореА рддрдкрд╛рдИрдВрд▓рд╛рдИ рдХрд╕рд░реА рдорджреНрджрдд рдЧрд░реНрди рд╕рдХреНрдЫреМрдВ?"]
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class Goodbye(Action):
    def name(self):
        return "action_goodbye"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ['Thank you, ЁЯЩП I am happy to help you. For more details about us please visit our website <a href="http://vyccu.org.np">vyccu.org.np</a>',
                        'I hope I was helpful for you. ЁЯШБ To know more about us you can visit our website <a href="http://vyccu.org.np">vyccu.org.np</a>']
        else:
            messages = ['рдзрдиреНрдпрдмрд╛рдж, ЁЯЩП рдо рддрдкрд╛рдИрдВрд▓рд╛рдИ рд╕рд╣рдпреЛрдЧ рдЧрд░реНрди рдкрд╛рдПрдХреЛрдорд╛ рдЦреБрд╕реА рдЫреБред ЁЯШБ рд╣рд╛рдореА рдмрд╛рд░реЗ рдмрдврд┐ рдЬрд╛рдирдХрд╛рд░реАрдХрд╛ рд▓рд╛рдЧрд┐ рдХреГрдкрдпрд╛ рд╣рд╛рдореНрд░реЛ рд╡реЗрдмрд╕рд╛рдЗрдЯрдорд╛ рдЬрд╛рдиреБрд╣реЛрд╕реН <a href="http://vyccu.org.np">vyccu.org.np</a>',
                        'рдзрдиреНрдпрдмрд╛рдж, ЁЯШБ рдЖрд╢рд╛ рдЧрд░реНрджрдЫреБ рдХрд┐ рдо рддрдкрд╛рдИрдХреЛ рд▓рд╛рдЧрд┐ рд╕рд╣рдпреЛрдЧреА рдерд┐рдпреЛред ЁЯЩП рдпрджрд┐ рддрдкрд╛рдИрдВ рд╣рд╛рдореНрд░реЛ рдмрд╛рд░реЗрдорд╛ рдмрдврд┐ рдЬрд╛рдиреНрди рдЪрд╛рд╣рд╛рдиреБрд╣реБрдиреНрдЫ рднрдиреЗ рддрдкрд╛рдИрдВ рд╣рд╛рдореНрд░реЛ рд╡реЗрдмрд╕рд╛рдЗрдЯ рднреНрд░рдордг рдЧрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ <a href="http://vyccu.org.np">vyccu.org.np</a>']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class Location(Action):
    def name(self):
        return "action_location"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ['VYCCU Savings and Credit Cooperative Limited is located in Bijaynagar, Gaindakot-05, Nawalpur. Folllow us at google maps <a href="https://www.google.com/maps/dir//27.7015019,84.3871719/@27.701502,84.387172,17z?hl=en-US">maps</a>',
                        'You can visit us at Bijaynagar, Gaindakot-05, Nawalpur. Follow us at google maps <a href="https://www.google.com/maps/dir//27.7015019,84.3871719/@27.701502,84.387172,17z?hl=en-US">maps</a>']
        else:
            messages = ['рд╡рд┐рдХреБ рдмрдЪрдд рддрдерд╛ реардг рд╕рд╣рдХрд╛рд░реА рд▓рд┐рдорд┐рдЯреЗрдб рд╡рд┐рдЬрдпрдирдЧрд░, рдЧреИрдВрдбрд╛рдХреЛрдЯ-режрел, рдирд╡рд▓рдкреБрд░рдорд╛ рд╕реНрдерд┐рдд рдЫред рд╣рд╛рдореНрд░реЛ рдареЗрдЧрд╛рдирд╛ рдЧреВрдЧрд▓рдорд╛ рдкрдирд┐ рд╣реЗрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ <a href="https://www.google.com/maps/dir//27.7015019,84.3871719/@27.701502,84.387172,17z?hl=en-US">рд╕реНрдерд╛рди</a>',
                        'рддрдкрд╛рдИрдВ рд╣рд╛рдореАрд▓рд╛рдИ рдпрд╣рд╛рдБ рд╡рд┐рдЬрдпрдирдЧрд░, рдЧреИрдВрдбрд╛рдХреЛрдЯ-режрел, рдирд╡рд▓рдкреБрд░рдорд╛ рднреЗрдЯреНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫред рд╣рд╛рдореНрд░реЛ рдареЗрдЧрд╛рдирд╛ рдЧреВрдЧрд▓рдорд╛ рдкрдирд┐ рд╣реЗрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ <a href="https://www.google.com/maps/dir//27.7015019,84.3871719/@27.701502,84.387172,17z?hl=en-US">рд╕реНрдерд╛рди</a>']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class Contact(Action):
    def name(self):
        return "action_contact"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ['To know more about us and our services you can use these details: <br>Website: <a href="http://vyccu.org.np/contact-us/">vyccu.org.np/contact</a> <br>Email: vyccu@vyccu.org.np <br>Head Office Bijaynagar, Gaindakot-05, Nawalpur <br>Phone: 078-502601, 078-501364, 078-503162, 078-503104 <br>Please provide us with your following details so that we can contact you further.']
        else:
            messages = ['рд╣рд╛рдореА рд░ рд╣рд╛рдореНрд░реЛ рд╕реЗрд╡рд╛рд╣рд░реВрдХреЛ рдмрд╛рд░реЗрдорд╛ рдмрдврд┐ рдЬрд╛рдиреНрдирдХреЛ рд▓рд╛рдЧрд┐ рддрдкрд╛рдИрдВ рдпреА рд╡рд┐рд╡рд░рдгрд╣рд░реВ рдкреНрд░рдпреЛрдЧ рдЧрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреЗрдЫ, <br>рд╣рд╛рдореНрд░реЛ рд╡реЗрдмрд╕рд╛рдЗрдЯрдорд╛ <a href="http://vyccu.org.np/contact-us/">vyccu.org.np/contact</a> <br>рдИрдореЗрд▓: vyccu@vyccu.org.np <br>рдареЗрдЧрд╛рдирд╛: рд╡рд┐рдЬрдпрдирдЧрд░, рдЧреИрдВрдбрд╛рдХреЛрдЯ-режрел, рдирд╡рд▓рдкреБрд░ <br>рдлреЛрди рдирдореНрдмрд░: режренрео-релрежреиремрежрез, режренрео-релрежрезрейремрек, режренрео-релрежрейрезремреи, режренрео-релрежрейрезрежрек <br>рдХреГрдкрдпрд╛ рд╣рд╛рдореАрд▓рд╛рдИ рддрдкрд╛рдИрдВрдХреЛ рдирд┐рдореНрди рд╡рд┐рд╡рд░рдгрд╣рд░реВ рдкреНрд░рджрд╛рди рдЧрд░реНрдиреБрд╣реЛрд╕реН, рддрд╛рдХрд┐ рд╣рд╛рдореА рддрдкрд╛рдИрдВрд▓рд╛рдИ рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрди рд╕рдХреМред']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class AboutServiceCenter(Action):
    def name(self):
        return "action_about_service_center"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ['We have 11 service centers. You can get more info on service centers from <a href = "http://vyccu.org.np/service-center">vyccu.org.np/service-centers</a>',
                        'The information about our service centers can be found in this link: <a href = "http://vyccu.org.np/service-center">vyccu.org.np/service-centers</a>']
        else:
            messages = ['рд╣рд╛рдореАрд╕рдБрдЧ резрез рд╕реЗрд╡рд╛ рдХреЗрдиреНрджреНрд░рд╣рд░реВ рдЫрдиреНред рд╣рд╛рдореНрд░реЛ рд╕реЗрд╡рд╛ рдХреЗрдиреНрджреНрд░рд╣рд░реВрдмрд╛рд░реЗ рдердк рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрди рдпреЛ рд▓рд┐рдВрдХрдорд╛ рдерд┐рдЪреНрдиреБрд╣реЛрд╕реН <a href = "http://vyccu.org.np/service-center">vyccu.org.np/service-centers</a>',
                        'рд╣рд╛рдореНрд░реЛ резрез рд╕реЗрд╡рд╛ рдХреЗрдиреНрджреНрд░рд╣рд░реВрдХреЛ рдмрд╛рд░реЗрдорд╛ рдЬрд╛рдирдХрд╛рд░реА рдпрд╕ рд▓рд┐рдВрдХрдорд╛ рдлреЗрд▓рд╛ рдкрд╛рд░реНрди рд╕рдХрд┐рдиреНрдЫ <a href = "http://vyccu.org.np/service-center">vyccu.org.np/service-centers</a>']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class AskAccountAlreadyOpen(Action):
    def name(self):
        return "action_ask_account_already_open"
    
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ["Do you have a saving account with VYCCU saving and credit co-operative Ltd.?"]
        else:
            messages = ["рдХреЗ рддрдкрд╛рдЗрдБ рд╡рд┐рдХреБ рдмрдЪрдд рддрдерд╛ реардг рд╕рд╣рдХрд╛рд░реА рд▓рд┐рдорд┐рдЯреЗрдбрдорд╛ рдкрд╣рд┐рд▓реЗрдиреИ рдЦрд╛рддрд╛ рднрдПрдХреЛ рдорд╛рдиреНрдЫреЗ рд╣реЛ?"]
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class AccountAlreadyExist(Action):
    def name(self):
        return "action_account_already_exist"
    
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ["Dear customer, as you are already an existing customer of VYCCU saving and credit co-operative Ltd. You cannot open a new account with us as per local regulations. We will keep you posted here as we are adding many new exciting services soon.",
                        "Sir, since an account on your name already exist in VYCCU saving and credit co-operative Ltd. we cannot create a new account for you."]
        else:
            messages = ["рдкреНрд░рд┐рдп рдЧреНрд░рд╛рд╣рдХ, рддрдкрд╛рдИрдВ рдкрд╣рд┐рд▓реЗ рдиреИ рд╡рд┐рдХреБ рдмрдЪрдд рддрдерд╛ реардг рд╕рд╣рдХрд╛рд░реА рд▓рд┐рдорд┐рдЯреЗрдбрдХреЛ рдПрдХ рдЧреНрд░рд╛рд╣рдХ рд╣реБрдиреБрд╣реБрдиреНрдЫред рддрдкрд╛рдИрдВ рдирд┐рдпрдорд╣рд░реВ рдЕрдиреБрд╕рд╛рд░ рд╣рд╛рдореАрд╕рдБрдЧ рдирдпрд╛рдБ рдЦрд╛рддрд╛ рдЦреЛрд▓реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдиред рд╣рд╛рдореА рдЪрд╛рдБрдбреИ рдиреИ рдереБрдкреНрд░реИ рдирдпрд╛рдБ рдЙрддреНрд╕рд╛рд╣рдЬрдирдХ рд╕реЗрд╡рд╛рд╣рд░реВ рдердкреНрджреИ рдЫреМрдВ рд░ рддрдкрд╛рдИрдВрд▓рд╛рдИ рд╕реВрдЪрдирд╛ рджрд┐рдиреЗрдЫреМрдВред",
                        "рддрдкрд╛рдИрдХреЛ рдирд╛рдордорд╛ рдЦрд╛рддрд╛ рдкрд╣рд┐рд▓реЗ рдиреИ рд╡рд┐рдХреБ рдмрдЪрдд рддрдерд╛ реардг рд╕рд╣рдХрд╛рд░реА рд▓рд┐рдорд┐рдЯреЗрдбрдорд╛ рдЕрд╡рд╕реНрдерд┐рдд рдЫред рддреНрдпрд╕рдХрд╛рд░рдг рд╣рд╛рдореА рддрдкрд╛рдИрдХреЛ рд▓рд╛рдЧрд┐ рдирдпрд╛рдБ рдЦрд╛рддрд╛ рдмрдирд╛рдЙрди рд╕рдХреНрджреИрдиреМрдВред"]
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class CreateAccount(Action):
    def name(self):
        return "action_create_account"
    
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ["Ok, now lets create an account for you."]
        else:
            messages = ["рдареАрдХ рдЫ, рдЕрдм рддрдкрд╛рдИрдВрдХреЛ рд▓рд╛рдЧрд┐ рдЦрд╛рддрд╛ рдмрдирд╛рдЙрдБрджрдЫреМрдВред"]
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class TypesofDeposit(Action):
    def name(self):
        return "action_ask_want_loan"
    
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            reply = "Do you want to take Loan?"
            buttons = [{'title': 'Yes',
                    'payload': 'yes'},
                    {'title': 'No',
                    'payload': 'no'},   
                    ]
        else:
            reply = "рдХреЗ рддрдкрд╛рдИ рдЛрдг рд▓рд┐рди рдЪрд╛рд╣рд╛рдиреБрд╣реБрдиреНрдЫ?"
            buttons = [{'title': 'рд╣реЛ',
                    'payload': 'рд╣реЛ'.format('')},
                    {'title': 'рдирд╛рдЗ',
                    'payload': 'рдирд╛рдЗ'},   
                    ]
        attachment = {
            "query_response": reply,
            "data":[{"buttons":buttons}],
            "type":"message_with_buttons",
            "data_fetch_status": "success"
        }
        # dispatcher.utter_message(attachment=attachment,buttons=buttons)
        dispatcher.utter_message(attachment=attachment)
        return []

class AfterNo(Action):
    def name(self):
        return "action_no"
    
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ["Ok sir. Are there any ways in which we can help you?","Ok sir. Is there anything more you want to know?"]
        else:
            messages = ["рд╣реБрдиреНрдЫ рд╕рд░ред рдХреЗ рддрдкрд╛рдИрдВрд╕рдБрдЧ рдЕрд░реБ рдХреЗрд╣рд┐ рдкреНрд░рд╢реНрди рд╣рд░реБрдЫрди рдЬрд╕реНрдХреЛ рдо рдЙрддреНрддрд░ рджрд┐рдПрд░ рд╕рд╣рдпреЛрдЧ рдЧрд░реНрди рд╕рдХреНрдЫреБ?"]
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return []

class GetATMCard(Action):
    def name(self):
        return "action_get_atm_card"
    
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            messages = ['Please contact to your nearest Service center to get your ATM card. The information on our service center can be found in this link: <a href = "http://vyccu.org.np/service-center">vyccu.org.np/service-centers</a>']
        else:
            messages = ['рддрдкрд╛рдИрдВрдХреЛ рдПрдЯреАрдПрдо рдХрд╛рд░реНрдб рдкреНрд░рд╛рдкреНрдд рдЧрд░реНрдирдХрд╛ рд▓рд╛рдЧрд┐ рдХреГрдкрдпрд╛ рддрдкрд╛рдИрдВрдХреЛ рдирдЬрд┐рдХрдХреЛ рд╕реЗрд╡рд╛ рдХреЗрдиреНрджреНрд░рдорд╛ рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрдиреБрд╣реЛрд╕реНред рд╣рд╛рдореНрд░реЛ рд╕реЗрд╡рд╛ рдХреЗрдиреНрджреНрд░рдорд╛ рдЬрд╛рдирдХрд╛рд░реА рдпрд╕ рд▓рд┐рдВрдХрдорд╛ рдлреЗрд▓рд╛ рдкрд╛рд░реНрди рд╕рдХрд┐рдиреНрдЫ: <a href = "http://vyccu.org.np/service-center">vyccu.org.np/service-centers</a>']
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return [SlotSet('type_of_services', None)]

class AboutSpecificService(Action):
    def name(self):
        return "action_about_specific_service"
    
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        service_type = tracker.get_slot('type_of_services')
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            type_list = {
                "atm": "Dear Member, you can't register ATM services through online, we are adding many new exciting services soon. For ATM register please contact to your nearest <a href='http://vyccu.org.np/service-center'>Service Center</a>",
                "sms banking": "Dear Member, you can register SMS Banking service through our VYCCU Smart Banking Application. It is available on Play store and Apple store.",
                "deposit": "Dear Member, you can know about the deposit from this link <a href = 'http://vyccu.org.np/services/deposit'>Deposit Service</a>",
                "loan": "Dear Member, you can know about the loan from this link <a href = 'http://vyccu.org.np/services/loans'>Loan Service</a>",
                "remittance": "Dear Member, you can know about the remittance from this link <a href = 'http://vyccu.org.np/services/remittance'>Remittance Service</a>",
                "health insurance": "Dear Member, you can know about the health insurance from this link <a href = 'http://vyccu.org.np/services/health-insurance'>Health Insurance Service </a>",
                "mobile banking": "Dear Member, you can know about the mobile banking from this link <a href = 'http://vyccu.org.np/services/other-services'>Mobile Banking Service</a>",
            }
        else:
            type_list = {
                "atm": "рддрдкрд╛рдИрдВ рдЕрдирд▓рд╛рдЗрди рдорд╛рд░реНрдлрдд рдПрдЯреАрдПрдо (ATM) рд╕реЗрд╡рд╛ рджрд░реНрддрд╛ рдЧрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдиред рдПрдЯреАрдПрдо рд░реЗрдЬрд┐рд╕реНрдЯрд░рдХрд╛ рд▓рд╛рдЧрд┐ рдХреГрдкрдпрд╛ рддрдкрд╛рдИрдВрдХреЛ рдирдЬрд┐рдХрдХреЛ рд╕реЗрд╡рд╛ рдХреЗрдиреНрджреНрд░рдорд╛ (service center) рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрдиреБрд╣реЛрд╕реНред рд▓рд┐рдВрдХ: <a href='http://vyccu.org.np/service-center'>Service Center</a>",
                "sms banking": " рддрдкрд╛рдИрдВ рд╣рд╛рдореНрд░реЛ рд╡рд┐рдХреБ рд╕реНрдорд╛рд░реНрдЯ рдмреИрдВрдХрд┐рдВрдЧ рдорд╛рд░реНрдлрдд SMS рдмреИрдВрдХрд┐рдВрдЧ рд╕реЗрд╡рд╛ рджрд░реНрддрд╛ рдЧрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫред рдпреЛ рдкреНрд▓реЗ рд╕реНрдЯреЛрд░ рд░ рдПрдкреНрдкрд▓ рд╕реНрдЯреЛрд░рдорд╛ рдЙрдкрд▓рдмреНрдз рдЫред",
                "deposit": "рддрдкрд╛рдИрдВ рдпреЛ рд▓рд┐рдВрдХ рдмрд╛рдЯ рдбрд┐рдкреЛрдЬрд┐рдЯ (Deposit) рдХреЛ рдмрд╛рд░реЗрдорд╛ рдЬрд╛рдиреНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ: <a href = 'http://vyccu.org.np/services/deposit'>Deposit Service</a>",
                "loan": "рддрдкрд╛рдИрдВ рдпреЛ рд▓рд┐рдВрдХ рдмрд╛рдЯ рдЛрдг (Loan) рдХреЛ рдмрд╛рд░реЗрдорд╛ рдЬрд╛рдиреНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ: <a href = 'http://vyccu.org.np/services/loans'>Loan Service</a>",
                "remittance": "рддрдкрд╛рдИрдВ рдпреЛ рд▓рд┐рдВрдХ рдмрд╛рдЯ рд░реЗрдорд┐рдЯреНрдпрд╛рдиреНрд╕ (Remittance) рдХреЛ рдмрд╛рд░реЗрдорд╛ рдЬрд╛рдиреНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ: <a href = 'http://vyccu.org.np/services/remittance'>Remittance Service</a>",
                "health insurance": "рддрдкрд╛рдИрдВ рдпреЛ рд▓рд┐рдВрдХ рдмрд╛рдЯ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмреАрдорд╛ (Health Insurance) рдХреЛ рдмрд╛рд░реЗрдорд╛ рдЬрд╛рдиреНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ: <a href = 'http://vyccu.org.np/services/health-insurance'>Health Insurance Service </a>",
                "mobile banking": "рддрдкрд╛рдИрдВ рдпреЛ рд▓рд┐рдВрдХ рдмрд╛рдЯ рдореЛрдмрд╛рдЗрд▓ рдмреИрдВрдХрд┐рдВрдЧ (Mobile Banking) рдХреЛ рдмрд╛рд░реЗрдорд╛ рдЬрд╛рдиреНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫ: <a href = 'http://vyccu.org.np/services/other-services'>Mobile Banking Service</a>",
            }
        try:
            reply = type_list[service_type]
        except:
            messages = ["ЁЯШХ Sorry, I cannot understand you. Could you repeat it again? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред", "ЁЯШХ I am having confusion in understanding it. Would you repeat it please? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред",
                "ЁЯШХ I find it quite ambiguous. Can you tell me again a bit clearly? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред"]
            reply = random.choice(messages)
            attachment = {
                "query_response": reply,
                "data":[],
                "type":"normal_message",
                "data_fetch_status": "success"
            }
            dispatcher.utter_message(attachment=attachment)
            return [UserUtteranceReverted()]
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return [SlotSet('type_of_services', None)]

class TypeOfSpecificService(Action):
    def name(self):
        return "action_type_of_specific_service"
    
    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        service_type = tracker.get_slot('type_of_services')
        question = tracker.latest_message['text']
        language_list = ["hi","ne","mr"]
        if detect(question) not in language_list:
            type_list = {
                "deposit": "The types of deposit can be found from this link <a href = 'http://vyccu.org.np/services/deposit'>Deposit Service</a>",
                "loan": "The various types of loan provided by us are: - <br>1. Agriculture Loan <br>2. Business Loan <br>3. Career Loan <br>4. Education Loan <br>5. Hire Purchase Loan <br>6. Home Loan <br>7. Industry Loan",
            }
        else:
            type_list = {
                "deposit": "рдпрд╕ рд▓рд┐рдиреНрдХрдмрд╛рдЯ рдбрд┐рдкреЛрдЬрд┐рдЯ (Deposit) рдХрд╛ рдкреНрд░рдХрд╛рд░рд╣рд░реВ рдмрд╛рд░реЗ рдЬрдиреНрди рд╕рдХрд┐рдиреНрдЫред рд▓рд┐рдиреНрдХ: <a href = 'http://vyccu.org.np/services/deposit'>Deposit Service</a>",
                "loan": "рд╣рд╛рдореАрджреНрд╡рд╛рд░рд╛ рдкреНрд░рджрд╛рди рдЧрд░рд┐рдПрдХреЛ рдЛрдгрдХрд╛ рд╡рд┐рднрд┐рдиреНрди рдкреНрд░рдХрд╛рд░рд╣рд░реВ рдпрд╕реНрддрд╛рдЫрди: - <br>1. рдХреГрд╖рд┐ рдЛрдг (Agriculture Loan) <br>2. рд╡реНрдпрд╡рд╕рд╛рдпрд┐рдХ рдЛрдг (Business Loan) <br>3. рдХреНрдпрд╛рд░рд┐рдпрд░ рдЛрдг (Career Loan) <br>4. рд╢реМрдХреНрд╖рд┐рдХ рдЛрдг (Education Loan) <br>5. рднрд╛рдбрд╛ рдЦрд░реАрдж рдЛрдг (Hire Purchase Loan) <br>6. рдШрд░ рд╕рдореНрдкрддреА рдЛрдг (Home Loan) <br>7. рдЙрджреНрдпреЛрдЧ рдЛрдг (Industry Loan)",
            }
        try:
            reply = type_list[service_type]
        except:
            messages = ["ЁЯШХ Sorry, I cannot understand you. We only have types of services for 'Deposit' and 'Loan'. Could you repeat it again? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред рд╣рд╛рдореАрд╕рдБрдЧ 'рдбрд┐рдкреЛрдЬрд┐рдЯ' рд░ 'рдЛрдг' рдХреЛ рд▓рд╛рдЧрд┐ рдорд╛рддреНрд░ рд╕реЗрд╡рд╛рд╣рд░реВ рдкреНрд░рдХрд╛рд░рд╣рд░реВ рдЫрдиреНред", "ЁЯШХ I am having confusion in understanding it. We only have types of services for 'Deposit' and 'Loan'. Would you repeat it please? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред рд╣рд╛рдореАрд╕рдБрдЧ 'рдбрд┐рдкреЛрдЬрд┐рдЯ' рд░ 'рдЛрдг' рдХреЛ рд▓рд╛рдЧрд┐ рдорд╛рддреНрд░ рд╕реЗрд╡рд╛рд╣рд░реВ рдкреНрд░рдХрд╛рд░рд╣рд░реВ рдЫрдиреНред",
                "ЁЯШХ I find it quite ambiguous. We only have types of services for 'Deposit' and 'Loan'. Can you tell me again a bit clearly? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред рд╣рд╛рдореАрд╕рдБрдЧ 'рдбрд┐рдкреЛрдЬрд┐рдЯ' рд░ 'рдЛрдг' рдХреЛ рд▓рд╛рдЧрд┐ рдорд╛рддреНрд░ рд╕реЗрд╡рд╛рд╣рд░реВ рдкреНрд░рдХрд╛рд░рд╣рд░реВ рдЫрдиреНред"]
            reply = random.choice(messages)
            attachment = {
                "query_response": reply,
                "data":[],
                "type":"normal_message",
                "data_fetch_status": "success"
            }
            dispatcher.utter_message(attachment=attachment)
            return [UserUtteranceReverted()]
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return [SlotSet('type_of_services', None)]

class EmailAddress(Action):
    def name(self):
        return "action_email_id"

    def run(self, dispatcher: CollectingDispatcher,tracker: Tracker,domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        try:
            email_id = tracker.get_slot('email')
        except:
            messages = ["ЁЯШХ Sorry, I cannot understand you. Could you repeat it again? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред", "ЁЯШХ I am having confusion in understanding it. Would you repeat it please? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред",
                "ЁЯШХ I find it quite ambiguous. Can you tell me again a bit clearly? <br>рдорд╛рдл рдЧрд░реНрдиреБрд╣реЛрд▓рд╛ред рддрдкрд╛рдИрдВрд▓реЗ рднрдиреЗрдХреЛ рдмреБрдЬрд┐рдирд╛ред рдХрд┐рд░реНрдкрдпрд╛ рдлреЗрд░реА рдПрдХ рдкрд▓реНрдЯ рднрдиреНрдиреБрд╣реЛрд▓рд╛ред"]
            reply = random.choice(messages)
            attachment = {
                "query_response": reply,
                "data":[],
                "type":"normal_message",
                "data_fetch_status": "success"
            }
            dispatcher.utter_message(attachment=attachment)
            return [UserUtteranceReverted()]
        messages = ["ЁЯЩП Thank you. We will contact you very soon. <br>рдзрдиреНрдпрд╡рд╛рджред рд╣рд╛рдореА рддрдкрд╛рдИрдВрд▓рд╛рдИ рдЪрд╛рдБрдбреИ рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрдиреЗрдЫреМрдВред","ЁЯЩП Thank you for giving us information. We will contact you soon. <br>рдзрдиреНрдпрд╡рд╛рджред рд╣рд╛рдореА рддрдкрд╛рдИрдВрд▓рд╛рдИ рдЪрд╛рдБрдбреИ рд╕рдореНрдкрд░реНрдХ рдЧрд░реНрдиреЗрдЫреМрдВред"]      
        reply = random.choice(messages)
        attachment = {
            "query_response": reply,
            "data":[],
            "type":"normal_message",
            "data_fetch_status": "success"
        }
        dispatcher.utter_message(attachment=attachment)
        return [SlotSet('email', None)]